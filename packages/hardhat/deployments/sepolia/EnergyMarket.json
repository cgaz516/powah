{
  "address": "0xbA1c0263AD091FA31e45ae2681DC9B417d79570E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nzddToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "name": "EnergyBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EnergyGenerated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        }
      ],
      "name": "EnergySold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "energyAmount",
          "type": "uint256"
        }
      ],
      "name": "buyEnergy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "fundContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "generateEnergy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserEnergyBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nzddToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerEnergyUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "energyAmount",
          "type": "uint256"
        }
      ],
      "name": "sellEnergy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "setEnergyPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userEnergyBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf5a06743866f96f3476616c7725dbd768861aaa3e33b4ceca7a852c016c06c7e",
  "receipt": {
    "to": null,
    "from": "0xd25fAc8ad63966d384dE83185a04103364DB7578",
    "contractAddress": "0xbA1c0263AD091FA31e45ae2681DC9B417d79570E",
    "transactionIndex": 120,
    "gasUsed": "554204",
    "logsBloom": "0x
    "blockHash": "0x2269118d78fc1f0f5b5982ef498142eca769debba2057ffb0b8e6f6590cc0bb9",
    "transactionHash": "0xf5a06743866f96f3476616c7725dbd768861aaa3e33b4ceca7a852c016c06c7e",
    "logs": [
      {
        "transactionIndex": 120,
        "blockNumber": 7957843,
        "transactionHash": "0xf5a06743866f96f3476616c7725dbd768861aaa3e33b4ceca7a852c016c06c7e",
        "address": "0xbA1c0263AD091FA31e45ae2681DC9B417d79570E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d25fac8ad63966d384de83185a04103364db7578"
        ],
        "data": "0x",
        "logIndex": 1536,
        "blockHash": "0x2269118d78fc1f0f5b5982ef498142eca769debba2057ffb0b8e6f6590cc0bb9"
      }
    ],
    "blockNumber": 7957843,
    "cumulativeGasUsed": "35665933",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE91d143072fc5e92e6445f18aa35DBd43597340c"
  ],
  "numDeployments": 1,
  "solcInputHash": "a995eb79f942552578f803e259548436",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nzddToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"EnergyBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EnergyGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"EnergySold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"energyAmount\",\"type\":\"uint256\"}],\"name\":\"buyEnergy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"generateEnergy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserEnergyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nzddToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerEnergyUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"energyAmount\",\"type\":\"uint256\"}],\"name\":\"sellEnergy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setEnergyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userEnergyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EnergyMarket.sol\":\"EnergyMarket\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/EnergyMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract EnergyMarket is Ownable {\\r\\n    IERC20 public nzddToken;\\r\\n    mapping(address => uint256) public userEnergyBalance;\\r\\n    uint256 public pricePerEnergyUnit = 1 ether; // 1 NZDD per energy unit\\r\\n\\r\\n    event EnergySold(address indexed seller, uint256 amount, uint256 payment);\\r\\n    event EnergyGenerated(address indexed user, uint256 amount);\\r\\n    event EnergyBought(address indexed buyer, uint256 amount, uint256 cost);\\r\\n\\r\\n    constructor(address _nzddToken) Ownable(msg.sender) {\\r\\n        nzddToken = IERC20(_nzddToken);\\r\\n    }\\r\\n\\r\\n    // Simulates energy generation - in a real app, this would be reported by IoT devices\\r\\n    function generateEnergy(uint256 amount) external {\\r\\n        userEnergyBalance[msg.sender] += amount;\\r\\n        emit EnergyGenerated(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function sellEnergy(uint256 energyAmount) external {\\r\\n        require(userEnergyBalance[msg.sender] >= energyAmount, \\\"Not enough energy balance\\\");\\r\\n        \\r\\n        uint256 payment = energyAmount * pricePerEnergyUnit / 1 ether;\\r\\n        \\r\\n        // Reduce user's energy balance\\r\\n        userEnergyBalance[msg.sender] -= energyAmount;\\r\\n        \\r\\n        // Pay the seller with NZDD (from the contract's balance)\\r\\n        require(nzddToken.transfer(msg.sender, payment), \\\"Payment failed\\\");\\r\\n        \\r\\n        emit EnergySold(msg.sender, energyAmount, payment);\\r\\n    }\\r\\n\\r\\n    function buyEnergy(uint256 energyAmount) external {\\r\\n        uint256 cost = (energyAmount * pricePerEnergyUnit) / 1 ether;\\r\\n        require(nzddToken.transferFrom(msg.sender, address(this), cost), \\\"Payment failed\\\");\\r\\n        userEnergyBalance[msg.sender] += energyAmount;\\r\\n        emit EnergyBought(msg.sender, energyAmount, cost);\\r\\n    }\\r\\n\\r\\n    // Admin function to set price\\r\\n    function setEnergyPrice(uint256 newPrice) external onlyOwner {\\r\\n        pricePerEnergyUnit = newPrice;\\r\\n    }\\r\\n\\r\\n    // Admin function to load NZDD into the contract\\r\\n    function fundContract(uint256 amount) external onlyOwner {\\r\\n        require(nzddToken.transferFrom(msg.sender, address(this), amount), \\\"Funding failed\\\");\\r\\n    }\\r\\n\\r\\n    // Get user's current energy balance\\r\\n    function getUserEnergyBalance(address user) external view returns (uint256) {\\r\\n        return userEnergyBalance[user];\\r\\n    }\\r\\n}\",\"keccak256\":\"0x703928300288824753e9512efcf92c63e895c04caead7e89eb40176ea2faf968\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052670de0b6b3a764000060035534801561001c57600080fd5b506040516108df3803806108df83398101604081905261003b916100e0565b338061006157604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61006a81610090565b50600180546001600160a01b0319166001600160a01b0392909216919091179055610110565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100f257600080fd5b81516001600160a01b038116811461010957600080fd5b9392505050565b6107c08061011f6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063c9c1d8ea11610071578063c9c1d8ea1461013d578063cae827cd14610150578063d2a9885b14610179578063e72cffc91461018c578063ecc18f99146101ac578063f2fde38b146101bf57600080fd5b80633519a2f8146100b95780634326ee36146100ce5780635f1af019146100e1578063715018a6146100fd5780638da5cb5b14610105578063bc8a251f1461012a575b600080fd5b6100cc6100c73660046106a4565b6101d2565b005b6100cc6100dc3660046106a4565b61029a565b6100ea60035481565b6040519081526020015b60405180910390f35b6100cc610437565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100f4565b6100cc6101383660046106a4565b61044b565b600154610112906001600160a01b031681565b6100ea61015e3660046106bd565b6001600160a01b031660009081526002602052604090205490565b6100cc6101873660046106a4565b610583565b6100ea61019a3660046106bd565b60026020526000908152604090205481565b6100cc6101ba3660046106a4565b6105df565b6100cc6101cd3660046106bd565b6105ec565b6101da610627565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610231573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025591906106ed565b6102975760405162461bcd60e51b815260206004820152600e60248201526d119d5b991a5b99c819985a5b195960921b60448201526064015b60405180910390fd5b50565b336000908152600260205260409020548111156102f95760405162461bcd60e51b815260206004820152601960248201527f4e6f7420656e6f75676820656e657267792062616c616e636500000000000000604482015260640161028e565b6000670de0b6b3a7640000600354836103129190610725565b61031c9190610742565b33600090815260026020526040812080549293508492909190610340908490610764565b909155505060015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ba91906106ed565b6103f75760405162461bcd60e51b815260206004820152600e60248201526d14185e5b595b9d0819985a5b195960921b604482015260640161028e565b604080518381526020810183905233917f70c565eaf7e964ec96b0279093ac75b59ac769a3176eb59bfaade53e3ae14e6b91015b60405180910390a25050565b61043f610627565b6104496000610654565b565b6000670de0b6b3a7640000600354836104649190610725565b61046e9190610742565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af11580156104c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ea91906106ed565b6105275760405162461bcd60e51b815260206004820152600e60248201526d14185e5b595b9d0819985a5b195960921b604482015260640161028e565b3360009081526002602052604081208054849290610546908490610777565b9091555050604080518381526020810183905233917fd4140a8710e346d120724c7f03d85467651741f98efcc0aebf8f91c16121de5d910161042b565b33600090815260026020526040812080548392906105a2908490610777565b909155505060405181815233907fb5c269943b04dc183f299161cb98f249e170faf229995a6eb5c99a69142f3d339060200160405180910390a250565b6105e7610627565b600355565b6105f4610627565b6001600160a01b03811661061e57604051631e4fbdf760e01b81526000600482015260240161028e565b61029781610654565b6000546001600160a01b031633146104495760405163118cdaa760e01b815233600482015260240161028e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156106b657600080fd5b5035919050565b6000602082840312156106cf57600080fd5b81356001600160a01b03811681146106e657600080fd5b9392505050565b6000602082840312156106ff57600080fd5b815180151581146106e657600080fd5b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761073c5761073c61070f565b92915050565b60008261075f57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561073c5761073c61070f565b8082018082111561073c5761073c61070f56fea264697066735822122022b7d47c4e9245126896bd8b3e10708a02a68be98bf6c63f8f575f384015a63664736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063c9c1d8ea11610071578063c9c1d8ea1461013d578063cae827cd14610150578063d2a9885b14610179578063e72cffc91461018c578063ecc18f99146101ac578063f2fde38b146101bf57600080fd5b80633519a2f8146100b95780634326ee36146100ce5780635f1af019146100e1578063715018a6146100fd5780638da5cb5b14610105578063bc8a251f1461012a575b600080fd5b6100cc6100c73660046106a4565b6101d2565b005b6100cc6100dc3660046106a4565b61029a565b6100ea60035481565b6040519081526020015b60405180910390f35b6100cc610437565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100f4565b6100cc6101383660046106a4565b61044b565b600154610112906001600160a01b031681565b6100ea61015e3660046106bd565b6001600160a01b031660009081526002602052604090205490565b6100cc6101873660046106a4565b610583565b6100ea61019a3660046106bd565b60026020526000908152604090205481565b6100cc6101ba3660046106a4565b6105df565b6100cc6101cd3660046106bd565b6105ec565b6101da610627565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610231573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025591906106ed565b6102975760405162461bcd60e51b815260206004820152600e60248201526d119d5b991a5b99c819985a5b195960921b60448201526064015b60405180910390fd5b50565b336000908152600260205260409020548111156102f95760405162461bcd60e51b815260206004820152601960248201527f4e6f7420656e6f75676820656e657267792062616c616e636500000000000000604482015260640161028e565b6000670de0b6b3a7640000600354836103129190610725565b61031c9190610742565b33600090815260026020526040812080549293508492909190610340908490610764565b909155505060015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ba91906106ed565b6103f75760405162461bcd60e51b815260206004820152600e60248201526d14185e5b595b9d0819985a5b195960921b604482015260640161028e565b604080518381526020810183905233917f70c565eaf7e964ec96b0279093ac75b59ac769a3176eb59bfaade53e3ae14e6b91015b60405180910390a25050565b61043f610627565b6104496000610654565b565b6000670de0b6b3a7640000600354836104649190610725565b61046e9190610742565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af11580156104c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ea91906106ed565b6105275760405162461bcd60e51b815260206004820152600e60248201526d14185e5b595b9d0819985a5b195960921b604482015260640161028e565b3360009081526002602052604081208054849290610546908490610777565b9091555050604080518381526020810183905233917fd4140a8710e346d120724c7f03d85467651741f98efcc0aebf8f91c16121de5d910161042b565b33600090815260026020526040812080548392906105a2908490610777565b909155505060405181815233907fb5c269943b04dc183f299161cb98f249e170faf229995a6eb5c99a69142f3d339060200160405180910390a250565b6105e7610627565b600355565b6105f4610627565b6001600160a01b03811661061e57604051631e4fbdf760e01b81526000600482015260240161028e565b61029781610654565b6000546001600160a01b031633146104495760405163118cdaa760e01b815233600482015260240161028e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156106b657600080fd5b5035919050565b6000602082840312156106cf57600080fd5b81356001600160a01b03811681146106e657600080fd5b9392505050565b6000602082840312156106ff57600080fd5b815180151581146106e657600080fd5b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761073c5761073c61070f565b92915050565b60008261075f57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561073c5761073c61070f565b8082018082111561073c5761073c61070f56fea264697066735822122022b7d47c4e9245126896bd8b3e10708a02a68be98bf6c63f8f575f384015a63664736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/EnergyMarket.sol:EnergyMarket",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 942,
        "contract": "contracts/EnergyMarket.sol:EnergyMarket",
        "label": "nzddToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)877"
      },
      {
        "astId": 946,
        "contract": "contracts/EnergyMarket.sol:EnergyMarket",
        "label": "userEnergyBalance",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 949,
        "contract": "contracts/EnergyMarket.sol:EnergyMarket",
        "label": "pricePerEnergyUnit",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)877": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}